generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("EMPLOYEE")
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TimeEntry     TimeEntry[]
  Availability  Availability[]
  Schedule      Schedule[]
  ScheduleShift ScheduleShift[]
  ProjectMember ProjectMember[]
  LeaveRequest  LeaveRequest[]

  @@index([email])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  status      String   @default("ACTIVE")
  company     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProjectMember ProjectMember[]
  ScheduleShift ScheduleShift[]
  TimeEntry     TimeEntry[]

  @@index([company])
  @@index([status])
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("EMPLOYEE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  userId      String
  projectId   String?
  startTime   DateTime
  endTime     DateTime?
  description String
  approved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([startTime])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  status    String // AVAILABLE, UNAVAILABLE, PARTIAL
  hours     Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Schedule {
  id          String   @id @default(cuid())
  date        DateTime @unique
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  createdBy User            @relation(fields: [createdById], references: [id])
  shifts    ScheduleShift[]
}

model ScheduleShift {
  id         String   @id @default(cuid())
  scheduleId String
  userId     String
  projectId  String?
  startTime  DateTime
  endTime    DateTime
  notes      String?
  status     String   @default("SCHEDULED")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
  project  Project? @relation(fields: [projectId], references: [id])

  @@index([scheduleId])
  @@index([userId])
}

model LeaveRequest {
  id        String   @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  type      String // VACATION, SICK, PERSONAL
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  reason    String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}
